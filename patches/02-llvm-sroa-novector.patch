diff --git a/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp b/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
index 235f0da86..6b9228d07 100644
--- a/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
+++ b/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
@@ -142,6 +142,12 @@ static cl::opt<bool> EnableVectorFCopySignExtendRound(
     cl::desc(
         "Enable merging extends and rounds into FCOPYSIGN on vector types"));
 
+static cl::opt<bool> EnableLoadCombine(
+    "combiner-load-merging", cl::Hidden, cl::init(true),
+    cl::desc("DAG combine enable merging multiple loads "
+              "into a wider load"));
+
+
 namespace {
 
   class DAGCombiner {
@@ -8914,6 +8920,9 @@ SDValue DAGCombiner::MatchLoadCombine(SDNode *N) {
   assert(N->getOpcode() == ISD::OR &&
          "Can only match load combining against OR nodes");
 
+  if (!EnableLoadCombine) 
+  return SDValue();
+
   // Handles simple types only
   EVT VT = N->getValueType(0);
   if (VT != MVT::i16 && VT != MVT::i32 && VT != MVT::i64)
diff --git a/llvm/lib/Transforms/Scalar/SROA.cpp b/llvm/lib/Transforms/Scalar/SROA.cpp
index 983a75e1d..da5ec0e2b 100644
--- a/llvm/lib/Transforms/Scalar/SROA.cpp
+++ b/llvm/lib/Transforms/Scalar/SROA.cpp
@@ -1066,6 +1066,9 @@ private:
     if (!IsOffsetKnown)
       return PI.setAborted(&II);
 
+    // AG: Do not split any allocas that are used by memtransfer
+    PI.setAborted(&II);
+
     // This side of the transfer is completely out-of-bounds, and so we can
     // nuke the entire transfer. However, we also need to nuke the other side
     // if already added to our partitions.
@@ -2039,6 +2042,9 @@ static VectorType *isVectorPromotionViable(Partition &P, const DataLayout &DL) {
   };
   // Put load and store types into a set for de-duplication.
   for (const Slice &S : P) {
+    /* AG: skip this */
+    continue;
+
     Type *Ty;
     if (auto *LI = dyn_cast<LoadInst>(S.getUse()->getUser()))
       Ty = LI->getType();
