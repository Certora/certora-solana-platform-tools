diff --git a/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp b/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
index 235f0da86..13461ffd0 100644
--- a/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
+++ b/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
@@ -142,6 +142,12 @@ static cl::opt<bool> EnableVectorFCopySignExtendRound(
     cl::desc(
         "Enable merging extends and rounds into FCOPYSIGN on vector types"));
 
+static cl::opt<bool> EnableLoadCombine(
+    "combiner-load-merging", cl::Hidden, cl::init(true),
+    cl::desc("DAG combine enable merging multiple loads "
+              "into a wider load"));
+
+
 namespace {
 
   class DAGCombiner {
@@ -8696,6 +8702,9 @@ static SDValue stripTruncAndExt(SDValue Value) {
 /// =>
 ///  *((i32)p) = BSWAP(val);
 SDValue DAGCombiner::mergeTruncStores(StoreSDNode *N) {
+  if (!EnableStoreMerging)
+  return SDValue();
+
   // The matching looks for "store (trunc x)" patterns that appear early but are
   // likely to be replaced by truncating store nodes during combining.
   // TODO: If there is evidence that running this later would help, this
@@ -8914,6 +8923,9 @@ SDValue DAGCombiner::MatchLoadCombine(SDNode *N) {
   assert(N->getOpcode() == ISD::OR &&
          "Can only match load combining against OR nodes");
 
+  if (!EnableLoadCombine) 
+  return SDValue();
+
   // Handles simple types only
   EVT VT = N->getValueType(0);
   if (VT != MVT::i16 && VT != MVT::i32 && VT != MVT::i64)
diff --git a/llvm/lib/Transforms/Scalar/SROA.cpp b/llvm/lib/Transforms/Scalar/SROA.cpp
index 983a75e1d..0e5cff400 100644
--- a/llvm/lib/Transforms/Scalar/SROA.cpp
+++ b/llvm/lib/Transforms/Scalar/SROA.cpp
@@ -121,6 +121,10 @@ static cl::opt<bool> SROAStrictInbounds("sroa-strict-inbounds", cl::init(false),
 /// Disable running mem2reg during SROA in order to test or debug SROA.
 static cl::opt<bool> SROASkipMem2Reg("sroa-skip-mem2reg", cl::init(false),
                                      cl::Hidden);
+
+static cl::opt<uint64_t> MaxMemcpySplit("sroa-max-memcpy-split",
+                                        cl::Hidden,
+                                        cl::init(std::numeric_limits<uint64_t>::max()));
 namespace {
 
 /// Calculate the fragment of a variable to use when slicing a store
@@ -1066,6 +1070,11 @@ private:
     if (!IsOffsetKnown)
       return PI.setAborted(&II);
 
+    if (AllocSize > MaxMemcpySplit) {
+        // CERTORA: Do not split any allocas that are used by memtransfer unless they are small
+        PI.setAborted(&II);
+    }
+
     // This side of the transfer is completely out-of-bounds, and so we can
     // nuke the entire transfer. However, we also need to nuke the other side
     // if already added to our partitions.
@@ -2039,6 +2048,9 @@ static VectorType *isVectorPromotionViable(Partition &P, const DataLayout &DL) {
   };
   // Put load and store types into a set for de-duplication.
   for (const Slice &S : P) {
+    /* AG: skip this */
+    continue;
+
     Type *Ty;
     if (auto *LI = dyn_cast<LoadInst>(S.getUse()->getUser()))
       Ty = LI->getType();
